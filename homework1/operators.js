'use strict'
// Записать в коротком виде:
// let a = a + 5; // a += 5
// let b = b * 15; // b *= 15
// let c = c - 3; // c -= 3
// let d = d % 2; // d %= 2
// let k = a + k; // k += a
// let l = l * b; // l *= b
// let m = m * 3 * k; // m *= 3 * k

// 1 
// Возвести переменную в куб, используя краткую запись.
const test1 = 3;
const cube = (number) => number**3;
console.log(cube(test1));

// 2
// Если переменная равна “маленький”, присвоить ей значение “большой”, иначе “маленький”. Сделать тоже самое, используя тернарный оператор.
const smallOrBig = 'маленький';
const checkString = (word) => {
    return word = word === 'маленький' ? 'большой' : 'маленький';
}
console.log(checkString(smallOrBig));

// 3
// Записать условие, используя условный оператор if: если переменная меньше нуля: присвоить ей строку “меньше нуля” если переменная равна нулю: присвоить 1 если больше нуля: используя краткую запись, умножить переменную на 10 Сделать тоже самое, используя тернарный оператор.
const test2 = 5;
const checkValue = (number) => {
    if (number < 0) {
        number = "Меньше нуля";
    } else if (number === 0) {
        number = 1;
    } else {
        number *=10;
    };
    return number;
    //ИЛИ
    //return number = number < 0 ? "Меньше нуля" : ( number === 0 ? 1 : number * 10 );
}
console.log(checkValue(test2));

// 4
// Используя конструктор switch, записать следующее условие:
// if(a == 'котик') {
//   console.log('котик');
// } else if(a == 'собака') {
//   console.log('собака');
// } else if(a == 'хомячок') {
//   console.log('хомячок');
// } else {
//   console.log('неизвестное науке животное');
// }
const animalName = 'свинка';
const checkAnimal = (name) => {
    switch (name) {
        case 'котик':
            console.log('котик');
            break;
        case 'собака':
            console.log('собака');
            break;
        case 'хомячок':
            console.log('хомячок');
            break;
        default: 
            console.log('неизвестное науке животное');
    }
};
console.log(checkAnimal(animalName));

// 5 
// const compare = () => {
//     let x = 0 || 'строка'; // 'строка' - т.к оператор сравнения ИЛИ возращает первое истинное значение, а непустая строка преобразуется TRUE. Ноль преобразовывается в false
//     let x = 1 && 'строка'; // 'строка' - т.к. оператор И возвращает первое ложное значение, если все операнды были истинными, возвращается последний.
//     let x = null || 1; // 1 - т.к. null преобразуется в false, а оператор ИЛИ возвращает первое истинное значение
//     let x = null && 1; // null - т.к. оператор И возвращает первое ложное значение, а 1 ппреобразуется в true
//     let x = 1 && null; // null - т.к. оператор И возвращает первое ложное значение, а 1 ппреобразуется в true
//     let x = null || 0 || 1; // 1  - т.к оператор сравнения ИЛИ возращает первое истинное значение, а 0 и null преобрауются в false
//     let x = null && 0 && 1; //null,  т.к. оператор И возвращает первое ложное значение


// // 6 
// const mathOperations = () => {
//     let x = 1 + 2 + '3'; // 33 - т.к первая операция с двумя числами получаем 3, затем складываем со строкой 3, в результате чего происходит неявное пробразование опернад к строке, итого 3 и 3 склеиваются
//     let x = 1 + 2 - '1'; // 2 - в результате первой операции получаем 3, затем вычитаем строку, однако при вычитании строка преобразуется в число
//     let x = '1' + 2 - 1; // 11 - в результате первой операции получаем 12, т.к число и строка склеиваются. Далее знак минус, строка преобразуется в число, получаем 12-1=11
//     let x = true + 1; // 2 - т.к true преобразуется в единицу. 1+1=2
//     let x = +'1' + 2; // 3 - унарный плюс перед строкой '1' преобразует ее в число
//     let x = null + 2; // 0 - т.к. null преобразуется в 0
//     let x = undefined + 2; // NaN - так как undefined преобразуется в NaN, а любые операции с NaN дают NaN
//     let x = true + undefined; // NaN - так как undefined преобразуется в NaN, а любые операции с NaN дают NaN
